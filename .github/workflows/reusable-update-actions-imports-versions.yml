name: reusable update actions imports versions

on:
  workflow_call: {}

jobs:
  presubmit-workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: mikefarah/yq@bbe305500687a5fe8498d74883c17f0f06431ac4
      - id: actions-per-workflow
        run: |
          # steps
          # 1. get jobs from uses fields
          ACTIONS=$(
            for WORKFLOW in $(find .github/workflows -type f -name '*.yml'); do
              ACTIONS=$(< $WORKFLOW \
                yq e '.jobs.*.steps[].uses as $jobsteps | .jobs.*.uses as $jobuses | $jobsteps | [., $jobuses]' -o json \
                  | jq -rcMs --arg file "$WORKFLOW" '{"actions": . | flatten} | .file = $file')
              [ -z "${ACTIONS}" ] && continue
              echo -e "${ACTIONS}"
            done | jq -sc '.'
          )
          echo "actions=$ACTIONS" >> $GITHUB_OUTPUT
      - name: display actions
        run: |
          echo -e '${{ steps.actions-per-workflow.outputs.actions }}' | yq e -P
      - name: iterate through each file's actions and update them
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for LINE in $(echo '${{ steps.actions-per-workflow.outputs.actions }}' | jq --arg REPOSITORY '${{ github.repository }}' -rcM '.[] | .file as $file | .actions[] | . as $action_in_workflow | split("@") | .[0] as $action | $action | split("/") | .[0] as $org | .[1] as $repo | {"file": $file, "action": $action, "org": $org, "repo": $repo, "action_in_workflow": $action_in_workflow} | select(.action | contains($REPOSITORY) == false)'); do
            file="$(echo $LINE | jq -rcM .file)"
            action="$(echo $LINE | jq -rcM .action)"
            org="$(echo $LINE | jq -rcM .org)"
            repo="$(echo $LINE | jq -rcM .repo)"
            action_in_workflow="$(echo $LINE | jq -rcM .action_in_workflow)"

            echo "$file: $action; $org/$repo"

            default_branch="$(gh api repos/$org/$repo --jq .default_branch)"
            latest_commit_hash="$(gh api repos/$org/$repo/commits/$default_branch --jq '.sha')"
            latest_release_tag_name="$(gh api repos/$org/$repo/releases/latest --jq '.tag_name' 2>/dev/null || echo '')"
            latest_release_commit_hash="$(gh api repos/$org/$repo/git/ref/tags/$latest_release_tag_name --jq .object.sha 2>/dev/null || echo '')"

            commit_hash=
            if [ -n "$latest_release_commit_hash" ] && [ ! "$(echo $latest_release_commit_hash | jq .message)" = "Not Found" ]; then
              commit_hash="$latest_release_commit_hash"
            else
              commit_hash="$latest_commit_hash"
            fi

            printf "$file: $action@$commit_hash (from $action_in_workflow)"
            if [ -n "$latest_release_tag_name" ]; then
              echo " # $latest_release_tag_name"
            else
              latest_release_tag_name="$default_branch"
            fi

            FROM="$action_in_workflow" TO="$action@$commit_hash # $latest_release_tag_name" \
            yq e -i '. as $yml | .jobs | keys | .[] as $job | $yml | with(.jobs[$job].steps[] | select(.uses == env(FROM)); .uses = env(TO))' .github/workflows/reusable-container-image-scan.yml

          done
          git diff
      - name: determine changes
        id: determine-changes
        run: |
          if git diff --name-only --diff-filter=ACMRT | grep .github/workflows; then
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      - name: determine if there is an existing PR
        id: existing-pr
        if: ${{ steps.determine-changes.outputs.changes == 'true' }}
        run: |
          EXISTING_PR="$(gh pr list --json title,labels,body --jq '.' --label update-actions-versions --search "Update Actions versions" | jq -r .[].title)"
          if [ "${EXISTING_PR}" = "Update Actions versions" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
      - name: create PR
        if: ${{ steps.determine-changes.outputs.changes == 'true' && steps.existing-pr.outputs.exists != 'true' }}
        id: create-pr
        run: |
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M)"
          NEW_BRANCH="update-actions-versions--${TIMESTAMP}"
          echo "new-branch=$NEW_BRANCH" >> $GITHUB_OUTPUT
          git add ${{ inputs.modfile }}
          git branch "${NEW_BRANCH}"
          git checkout "${NEW_BRANCH}"
          git commit -s -m "update Actions versions: $TIMESTAMP"
          git push origin "${NEW_BRANCH}"
          gh pr create --title "Update Actions versions: $TIMESTAMP" --body "Updates versions of Actions: $TIMESTAMP" --label update-actions-versions
      - name: merge PR
        if: ${{ inputs.autoMerge && steps.determine-changes.outputs.changes == 'true' && steps.existing-pr.outputs.exists != 'true' }}
        run: |
          gh pr merge --merge --auto ${{ steps.create-pr.outputs.new-branch }}
